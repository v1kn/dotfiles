# Print file metadata etc.
ffmpeg -i path/to/file.ext

# Convert all m4a files to mp3
for f in *.m4a; do ffmpeg -i "$f" -acodec libmp3lame -ab 320k "${f%.m4a}.mp3"; done

# Listen to 10 seconds of audio from a video file
# -ss : start time
# -t  : seconds to cut
# -autoexit : closes ffplay as soon as the audio finishes
#
ffmpeg -ss 00:34:24.85 -t 10 -i path/to/file.mp4 -f mp3 pipe:play | ffplay -i pipe:play -autoexit


# cut out a clip from 30min to 40min of a movie
# -ss : start timr
# -t : time to cut
# -to : end time
#
ffmpeg -i inputfile -ss 30:00 -to 40:00 -c copy outfile


# convert a 1080p video into 720p
# -vf scale=-1:720 : sets height to 720 and width will be calculated
# libx264 : video codec
# aac : audio codec
# -crf : quaity. 23 is default, 51 is worst, 0 is lossless
# -preset : governs quality vs compression, the slower the better
#
ffmpeg -i infile -vf scale=-1:720 -c:v libx264 -crf 18 -preset veryslow -c:a copy outfile

# forcing ffmpeg to play nicely with while read loops inconverting ape to wav in a batch:

find . -type f -name "*.ape" | while read file; do ffmpeg -i "$file" "${file%ape}wav" -y < /dev/null; done

# extract subtitles from mkv
ffmpeg -i infile.mkv -map 0:s:0 subs.srt

# transcoding avi into mkv, using libx264
ffmpeg -i infile.avi -sameq -vcodec libx264 -threads 9 -acodec copy outfile.mkv

# when there is an error "missing headers or frames"
# add appropriate flags, like so
ffmpeg -fflags +genpts -i infile outfile

# embedding hardsubs in a video
# .ssa and .ass subs will have formatting inside its metadata
ffmpeg -i infile -vf subtitles=subs.ass -c:a copy outfile
# for srt subs, the formatting has to be a part of ffmpeg invocation:
ffmpeg -i infile -vf "subtitles=subs.srt:force_style='Fontsize=24,PrimaryColour=&H0000ff&'" -c:a copy ouftile

# embedding softsubs in a video
# disposition will set subs as default
ffmpeg -i infile -i subtitles.ass -codec copy -disposition:s:0 default outfile
# more complicated version (not always necesary)
ffmpeg -i infile.mkv -i subtitles.srt -c:v copy -c:a copy -c:s srt -map 0:0 -map 0:1 -map 1:0 -disposition:s:0 default outfile.mkv

##  extract subtitles from mkv
##  the last 0 in `0:s:0` depends on how many subs are in the file
ffmpeg -i moviefile.mkv -map 0:s:0 subs.srt

##  add softsubs into mkv and delay the subs by 7s
##  `-itsoffset` has to come before the subtitle input file
ffmpeg -i moviefile.mkv -itsoffset 7 -i subsfile.srt -c copy -disposition:s:0 default outfile.mkv
##  do the same in a loop
for file in *.mkv; do ffmpeg -i "$file" -itsoffset 7 -i "${file%.mkv}.srt" -c copy -disposition:s:0 default "${file%.mkv}2.mkv"; done
